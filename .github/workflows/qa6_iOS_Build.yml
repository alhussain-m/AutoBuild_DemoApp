name: "Build iOS IPA"

on:
  workflow_dispatch:
    branches: [main]

jobs:
  build_with_signing:
    runs-on: macos-latest
    env:
      BUILD_ENV: "qa6"
      VERSION_SUFFIX: "-beta.${{ github.run_number }}"
      TEAM_ID: "8LE2DAQG25"
      BUNDLE_ID: "com.citus.stage"
      KEYCHAIN_NAME: temp-build.keychain
      KEYCHAIN_PASSWORD: "123"
      PROVISIONING_PROFILE_SPECIFIER: "CitusHealth Stage Provisioning"

    steps:
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          IOS_CERT_P12: ${{ secrets.IOS_CERT_P12 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/ios_25-5.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/$KEYCHAIN_NAME

          # import certificate and provisioning profile from secrets
          echo -n "$IOS_CERT_P12" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i $PP_PATH))
          echo "PROFILE_UUID=${PROFILE_UUID}" >> $GITHUB_ENV

      - name: Build archive
        run: |
          xcodebuild -scheme "App" \
            -workspace ios/App/App.xcworkspace \
            -archivePath $RUNNER_TEMP/App.xcarchive \
            -sdk iphoneos \
            -configuration Release \
            -destination generic/platform=iOS \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            clean archive

      - name: Generate Export Options Plist
        run: |
          cat <<EOF > $RUNNER_TEMP/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>$TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROVISIONING_PROFILE_SPECIFIER</string>
              </dict>
          </dict>
          </plist>
          EOF

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/App.xcarchive \
            -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
            -exportPath $RUNNER_TEMP/build \
            -allowProvisioningUpdates

      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app-qa6-release${{ env.VERSION_SUFFIX }}.ipa
          path: ${{ runner.temp }}/build/App.ipa
          retention-days: 3

      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain "$RUNNER_TEMP/$KEYCHAIN_NAME"