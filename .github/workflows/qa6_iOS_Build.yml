name: iOS Build & Generate IPA

on:
  push:
    branches: [main, qa6, stage]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build environment'
        required: true
        default: 'qa6'
        type: choice
        options:
        - qa6
        - qa7
        - qa8
        - stage
        - production

env:
  NODE_VERSION: '18.x'
  XCODE_VERSION: '15.2'
  SCHEME: 'App'
  BUNDLE_ID: 'com.citus.stage'
  DEVELOPMENT_TEAM: '8LE2DAQG25'
  PROVISIONING_PROFILE: 'CitusHealth Stage Provisioning'

jobs:
  build-web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    outputs:
      build-env: ${{ steps.env.outputs.BUILD_ENV }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        scope: '@citushealth-inc'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --force
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        
    - name: Install Ionic CLI
      run: npm install -g @ionic/cli
      
    - name: Determine build environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "BUILD_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "BUILD_ENV=qa6" >> $GITHUB_OUTPUT
        fi
        
    - name: Debug build environment
      run: |
        echo "Build environment: ${{ steps.env.outputs.BUILD_ENV }}"
        echo "Available environment files:"
        ls -la src/environments/ || echo "No environments folder found"
        
    - name: Build web app
      run: |
        echo "üî® Building web app for environment: ${{ steps.env.outputs.BUILD_ENV }}"
        # Try production build first
        ionic build --prod
        
    - name: Verify build output
      run: |
        echo "‚úÖ Checking build output..."
        ls -la www/
        echo "üì¶ Web build completed successfully!"
        
    - name: Upload web build artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-build-${{ steps.env.outputs.BUILD_ENV }}
        path: www/
        retention-days: 7

  build-ios:
    needs: build-web
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        scope: '@citushealth-inc'
        registry-url: 'https://npm.pkg.github.com'
        cache: 'npm'
        
    - name: Download web build
      uses: actions/download-artifact@v4
      with:
        name: web-build-${{ needs.build-web.outputs.build-env }}
        path: www/
        
    - name: Install dependencies
      run: npm install --force
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        
    - name: Install CLI tools
      run: npm install -g @ionic/cli @capacitor/cli
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Setup Ruby for CocoaPods
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: Install CocoaPods
      run: |
        gem install cocoapods
        pod --version
        
    - name: Sync Capacitor
      run: |
        echo "üîÑ Syncing Capacitor..."
        npx cap sync ios
        echo "‚úÖ Capacitor sync completed!"
        
    - name: Install CocoaPods dependencies
      run: |
        echo "üì¶ Installing CocoaPods dependencies..."
        cd ios/App
        pod install --repo-update
        echo "‚úÖ CocoaPods installation completed!"
        
    - name: Setup code signing
      env:
        IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
        IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
        IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        echo "üîê Setting up code signing..."
        
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate and provisioning profile from secrets
        echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
        echo "‚úÖ Code signing setup completed"
        
    - name: Update version and build number
      run: |
        cd ios/App
        echo "üìù Updating version and build number..."
        
        # Update build number with GitHub run number
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" App/Info.plist
        
        # Display current version info
        echo "üì± App Version Info:"
        echo "Bundle Version: $(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" App/Info.plist)"
        echo "Marketing Version: $(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" App/Info.plist)"
        
    - name: Build and Archive iOS app
      run: |
        cd ios/App
        echo "üèóÔ∏è Building iOS app..."
        echo "Bundle ID: ${{ env.BUNDLE_ID }}"
        echo "Team ID: ${{ env.DEVELOPMENT_TEAM }}"
        
        # Clean build folder
        xcodebuild clean -workspace App.xcworkspace -scheme ${{ env.SCHEME }}
        
        # Build and archive
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme ${{ env.SCHEME }} \
          -configuration Release \
          -archivePath $RUNNER_TEMP/App.xcarchive \
          -allowProvisioningUpdates \
          CODE_SIGN_IDENTITY="iPhone Developer" \
          DEVELOPMENT_TEAM="${{ env.DEVELOPMENT_TEAM }}" \
          PROVISIONING_PROFILE_SPECIFIER="${{ env.PROVISIONING_PROFILE }}" \
          CODE_SIGN_STYLE=Manual \
          PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}"
          
        echo "‚úÖ iOS archive completed successfully!"
        
    - name: Export IPA
      run: |
        echo "üì§ Exporting IPA..."
        
        # Create export options plist for ad-hoc distribution
        cat > $RUNNER_TEMP/ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>method</key>
          <string>ad-hoc</string>
          <key>teamID</key>
          <string>${{ env.DEVELOPMENT_TEAM }}</string>
          <key>uploadBitcode</key>
          <false/>
          <key>uploadSymbols</key>
          <true/>
          <key>compileBitcode</key>
          <false/>
          <key>signingStyle</key>
          <string>manual</string>
          <key>provisioningProfiles</key>
          <dict>
            <key>${{ env.BUNDLE_ID }}</key>
            <string>${{ env.PROVISIONING_PROFILE }}</string>
          </dict>
        </dict>
        </plist>
        EOF
        
        # Export IPA
        xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/App.xcarchive \
          -exportPath $RUNNER_TEMP/export \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist
          
        echo "‚úÖ IPA export completed successfully!"
        
        # Verify IPA was created
        if ls $RUNNER_TEMP/export/*.ipa 1> /dev/null 2>&1; then
          echo "üì± IPA files created:"
          ls -la $RUNNER_TEMP/export/
          
          # Get IPA info
          IPA_PATH=$(find $RUNNER_TEMP/export -name "*.ipa" | head -1)
          IPA_SIZE=$(ls -lh "$IPA_PATH" | awk '{print $5}')
          IPA_NAME=$(basename "$IPA_PATH")
          
          echo "üì¶ IPA Details:"
          echo "  Name: $IPA_NAME"
          echo "  Path: $IPA_PATH"
          echo "  Size: $IPA_SIZE"
        else
          echo "‚ùå IPA not found!"
          exit 1
        fi
        
    # üì± UPLOAD IPA AS GITHUB ARTIFACT (NOT TESTFLIGHT)
    - name: Upload IPA to GitHub Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: üì±-iOS-App-${{ needs.build-web.outputs.build-env }}-Build-${{ github.run_number }}
        path: ${{ runner.temp }}/export/*.ipa
        retention-days: 30
        
    - name: Clean up keychain
      if: always()
      run: |
        if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          echo "üßπ Keychain cleaned up"
        fi
        
  build-summary:
    needs: [build-web, build-ios]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## üì± iOS IPA Generated Successfully!"
        echo ""
        echo "**‚úÖ Your IPA file is ready for download!**"
        echo ""
        echo "**üì• How to Download:**"
        echo "1. Scroll down to the 'Artifacts' section below"
        echo "2. Click on the IPA file to download"
        echo "3. The file will be available for 30 days"
        echo ""
        echo "**üì± Installation Options:**"
        echo "- Install via Apple Configurator 2"
        echo "- Install via Xcode Devices window"
        echo "- Distribute to team members"
        echo "- Upload to TestFlight manually (if needed later)"
        echo ""
        echo "**Build Info:**"
        echo "- Environment: ${{ needs.build-web.outputs.build-env }}"
        echo "- Build Number: ${{ github.run_number }}"
        echo "- Bundle ID: com.citus.stage"
        echo "- Distribution: Ad-hoc"